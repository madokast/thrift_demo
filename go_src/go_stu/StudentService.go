// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package go_stu

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - Name
//  - Age
//  - Scores
type Student struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Age int32 `thrift:"age,2" db:"age" json:"age"`
  Scores []int32 `thrift:"scores,3" db:"scores" json:"scores"`
}

func NewStudent() *Student {
  return &Student{}
}


func (p *Student) GetName() string {
  return p.Name
}

func (p *Student) GetAge() int32 {
  return p.Age
}

func (p *Student) GetScores() []int32 {
  return p.Scores
}
func (p *Student) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Student)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Student)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Age = v
}
  return nil
}

func (p *Student)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int32, 0, size)
  p.Scores =  tSet
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Scores = append(p.Scores, _elem0)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *Student) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Student"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Student) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Student) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "age", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:age: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Age)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.age (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:age: ", p), err) }
  return err
}

func (p *Student) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "scores", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:scores: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Scores)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Scores); i++ {
    for j := i+1; j<len(p.Scores); j++ {
      if func(tgt, src int32) bool {
        if tgt != src { return false }
        return true
      }(p.Scores[i], p.Scores[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Scores))
      }
    }
  }
  for _, v := range p.Scores {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:scores: ", p), err) }
  return err
}

func (p *Student) Equals(other *Student) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Age != other.Age { return false }
  if len(p.Scores) != len(other.Scores) { return false }
  for i, _tgt := range p.Scores {
    _src1 := other.Scores[i]
    if _tgt != _src1 { return false }
  }
  return true
}

func (p *Student) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Student(%+v)", *p)
}

type StudentService interface {
  // Parameters:
  //  - Students
  GroupByName(ctx context.Context, students []*Student) (_r map[string][]*Student, _err error)
  // Parameters:
  //  - Str
  Length(ctx context.Context, str string) (_r int32, _err error)
  // Parameters:
  //  - Values
  Distinct(ctx context.Context, values []int32) (_r []int32, _err error)
}

type StudentServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewStudentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StudentServiceClient {
  return &StudentServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewStudentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StudentServiceClient {
  return &StudentServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewStudentServiceClient(c thrift.TClient) *StudentServiceClient {
  return &StudentServiceClient{
    c: c,
  }
}

func (p *StudentServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *StudentServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *StudentServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Students
func (p *StudentServiceClient) GroupByName(ctx context.Context, students []*Student) (_r map[string][]*Student, _err error) {
  var _args2 StudentServiceGroupByNameArgs
  _args2.Students = students
  var _result4 StudentServiceGroupByNameResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "groupByName", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - Str
func (p *StudentServiceClient) Length(ctx context.Context, str string) (_r int32, _err error) {
  var _args5 StudentServiceLengthArgs
  _args5.Str = str
  var _result7 StudentServiceLengthResult
  var _meta6 thrift.ResponseMeta
  _meta6, _err = p.Client_().Call(ctx, "length", &_args5, &_result7)
  p.SetLastResponseMeta_(_meta6)
  if _err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Values
func (p *StudentServiceClient) Distinct(ctx context.Context, values []int32) (_r []int32, _err error) {
  var _args8 StudentServiceDistinctArgs
  _args8.Values = values
  var _result10 StudentServiceDistinctResult
  var _meta9 thrift.ResponseMeta
  _meta9, _err = p.Client_().Call(ctx, "distinct", &_args8, &_result10)
  p.SetLastResponseMeta_(_meta9)
  if _err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

type StudentServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler StudentService
}

func (p *StudentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *StudentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *StudentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewStudentServiceProcessor(handler StudentService) *StudentServiceProcessor {

  self11 := &StudentServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self11.processorMap["groupByName"] = &studentServiceProcessorGroupByName{handler:handler}
  self11.processorMap["length"] = &studentServiceProcessorLength{handler:handler}
  self11.processorMap["distinct"] = &studentServiceProcessorDistinct{handler:handler}
return self11
}

func (p *StudentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x12.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x12

}

type studentServiceProcessorGroupByName struct {
  handler StudentService
}

func (p *studentServiceProcessorGroupByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err13 error
  args := StudentServiceGroupByNameArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StudentServiceGroupByNameResult{}
  if retval, err2 := p.handler.GroupByName(ctx, args.Students); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc14 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing groupByName: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "groupByName", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err13 = thrift.WrapTException(err2)
    }
    if err2 := _exc14.Write(ctx, oprot); _write_err13 == nil && err2 != nil {
      _write_err13 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err13 == nil && err2 != nil {
      _write_err13 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err13 == nil && err2 != nil {
      _write_err13 = thrift.WrapTException(err2)
    }
    if _write_err13 != nil {
      return false, thrift.WrapTException(_write_err13)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "groupByName", thrift.REPLY, seqId); err2 != nil {
    _write_err13 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err13 == nil && err2 != nil {
    _write_err13 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err13 == nil && err2 != nil {
    _write_err13 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err13 == nil && err2 != nil {
    _write_err13 = thrift.WrapTException(err2)
  }
  if _write_err13 != nil {
    return false, thrift.WrapTException(_write_err13)
  }
  return true, err
}

type studentServiceProcessorLength struct {
  handler StudentService
}

func (p *studentServiceProcessorLength) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err15 error
  args := StudentServiceLengthArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "length", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StudentServiceLengthResult{}
  if retval, err2 := p.handler.Length(ctx, args.Str); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc16 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing length: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "length", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := _exc16.Write(ctx, oprot); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if _write_err15 != nil {
      return false, thrift.WrapTException(_write_err15)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "length", thrift.REPLY, seqId); err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if _write_err15 != nil {
    return false, thrift.WrapTException(_write_err15)
  }
  return true, err
}

type studentServiceProcessorDistinct struct {
  handler StudentService
}

func (p *studentServiceProcessorDistinct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err17 error
  args := StudentServiceDistinctArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StudentServiceDistinctResult{}
  if retval, err2 := p.handler.Distinct(ctx, args.Values); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc18 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing distinct: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "distinct", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := _exc18.Write(ctx, oprot); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if _write_err17 != nil {
      return false, thrift.WrapTException(_write_err17)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "distinct", thrift.REPLY, seqId); err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if _write_err17 != nil {
    return false, thrift.WrapTException(_write_err17)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Students
type StudentServiceGroupByNameArgs struct {
  Students []*Student `thrift:"students,1" db:"students" json:"students"`
}

func NewStudentServiceGroupByNameArgs() *StudentServiceGroupByNameArgs {
  return &StudentServiceGroupByNameArgs{}
}


func (p *StudentServiceGroupByNameArgs) GetStudents() []*Student {
  return p.Students
}
func (p *StudentServiceGroupByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StudentServiceGroupByNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Student, 0, size)
  p.Students =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &Student{}
    if err := _elem19.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Students = append(p.Students, _elem19)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StudentServiceGroupByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StudentServiceGroupByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "students", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:students: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Students)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Students {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:students: ", p), err) }
  return err
}

func (p *StudentServiceGroupByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StudentServiceGroupByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StudentServiceGroupByNameResult struct {
  Success map[string][]*Student `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStudentServiceGroupByNameResult() *StudentServiceGroupByNameResult {
  return &StudentServiceGroupByNameResult{}
}

var StudentServiceGroupByNameResult_Success_DEFAULT map[string][]*Student

func (p *StudentServiceGroupByNameResult) GetSuccess() map[string][]*Student {
  return p.Success
}
func (p *StudentServiceGroupByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StudentServiceGroupByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StudentServiceGroupByNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*Student, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key20 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key20 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*Student, 0, size)
    _val21 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem22 := &Student{}
      if err := _elem22.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
      }
      _val21 = append(_val21, _elem22)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Success[_key20] = _val21
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StudentServiceGroupByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StudentServiceGroupByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := v.Write(ctx, oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteListEnd(ctx); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StudentServiceGroupByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StudentServiceGroupByNameResult(%+v)", *p)
}

// Attributes:
//  - Str
type StudentServiceLengthArgs struct {
  Str string `thrift:"str,1" db:"str" json:"str"`
}

func NewStudentServiceLengthArgs() *StudentServiceLengthArgs {
  return &StudentServiceLengthArgs{}
}


func (p *StudentServiceLengthArgs) GetStr() string {
  return p.Str
}
func (p *StudentServiceLengthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StudentServiceLengthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Str = v
}
  return nil
}

func (p *StudentServiceLengthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "length_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StudentServiceLengthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "str", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:str: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Str)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.str (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:str: ", p), err) }
  return err
}

func (p *StudentServiceLengthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StudentServiceLengthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StudentServiceLengthResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStudentServiceLengthResult() *StudentServiceLengthResult {
  return &StudentServiceLengthResult{}
}

var StudentServiceLengthResult_Success_DEFAULT int32
func (p *StudentServiceLengthResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return StudentServiceLengthResult_Success_DEFAULT
  }
return *p.Success
}
func (p *StudentServiceLengthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StudentServiceLengthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StudentServiceLengthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StudentServiceLengthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "length_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StudentServiceLengthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StudentServiceLengthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StudentServiceLengthResult(%+v)", *p)
}

// Attributes:
//  - Values
type StudentServiceDistinctArgs struct {
  Values []int32 `thrift:"values,1" db:"values" json:"values"`
}

func NewStudentServiceDistinctArgs() *StudentServiceDistinctArgs {
  return &StudentServiceDistinctArgs{}
}


func (p *StudentServiceDistinctArgs) GetValues() []int32 {
  return p.Values
}
func (p *StudentServiceDistinctArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StudentServiceDistinctArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem23 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem23 = v
}
    p.Values = append(p.Values, _elem23)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StudentServiceDistinctArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StudentServiceDistinctArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *StudentServiceDistinctArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StudentServiceDistinctArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StudentServiceDistinctResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStudentServiceDistinctResult() *StudentServiceDistinctResult {
  return &StudentServiceDistinctResult{}
}

var StudentServiceDistinctResult_Success_DEFAULT []int32

func (p *StudentServiceDistinctResult) GetSuccess() []int32 {
  return p.Success
}
func (p *StudentServiceDistinctResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StudentServiceDistinctResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StudentServiceDistinctResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int32, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem24 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem24 = v
}
    p.Success = append(p.Success, _elem24)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *StudentServiceDistinctResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StudentServiceDistinctResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if func(tgt, src int32) bool {
          if tgt != src { return false }
          return true
        }(p.Success[i], p.Success[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StudentServiceDistinctResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StudentServiceDistinctResult(%+v)", *p)
}


